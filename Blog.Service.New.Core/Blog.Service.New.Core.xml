<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Service.New.Core</name>
    </assembly>
    <members>
        <member name="F:Blog.Service.New.Core.Const.Roles.SystemManage">
            <summary>
            系统管理员
            </summary>
        </member>
        <member name="F:Blog.Service.New.Core.Const.Roles.System">
            <summary>
            系统用户
            </summary>
        </member>
        <member name="F:Blog.Service.New.Core.Const.Roles.Guest">
            <summary>
            访客
            </summary>
        </member>
        <member name="F:Blog.Service.New.Core.Const.Roles.User">
            <summary>
            普通用户
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Save(Blog.Service.New.Core.Entities.Base.BaseEntity)">
            <summary>
            保存实体，系统根据ID自动判断更新还是新建
            </summary>
            <param name="entity">要保存到数据库的实体对象实例</param>
            <returns>穿件或者更新的记录的Id</returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Create(Blog.Service.New.Core.Entities.Base.BaseEntity,System.Boolean)">
            <summary>
            创建实体记录
            </summary>
            <param name="entity">实体对象实例</param>
            <param name="usePlugin">是否使用Plugin</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Update(Blog.Service.New.Core.Entities.Base.BaseEntity)">
            <summary>
            更新实体记录
            </summary>
            <param name="entity">实体对象实例</param>
            <returns>影响的书库的行数</returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Delete(System.String,System.String)">
            <summary>
            删除数据的实体记录
            </summary>
            <param name="typeName">表的名字</param>
            <param name="id">记录的主键Id</param>
            <returns>影响的数据库行数</returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Delete(Blog.Service.New.Core.Entities.Base.BaseEntity)">
            <summary>
            删除数据库的实体记录
            </summary>
            <param name="obj">实体对象</param>
            <returns>影响的数据库的行数</returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Delete(Blog.Service.New.Core.Entities.Base.BaseEntity[])">
            <summary>
            删除实体记录
            </summary>
            <param name="objArray">实体数组</param>
            <returns>影响的记录行数</returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.DeleteByWhere(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            根据条件删除数据库的实体记录
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.ExecuteTransaction(System.Action)">
            <summary>
            执行事务
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.ExecuteTransaction``1(System.Func{``0})">
            <summary>
            执行事务返回结果
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.QueryFirst``1(System.String)">
            <summary>
            根据 实体T 和 实体Id 获取实体对象实例
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.QueryFirst``1(System.String,System.Object)">
            <summary>
            根据查询条件查询实体对象
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Query(System.String,System.Object)">
            <summary>
            执行SQL查询
            </summary>
            <param name="sql"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.QueryCount(System.String,System.Object)">
            <summary>
            查询数量
            </summary>
            <param name="sql"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Query``1(System.String,System.Object)">
            <summary>
            根据SQL查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Query``1(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据查询条件查询实体的对象列表 (分页查询）
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Query``1(System.String,System.Object,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据查询条件查询实体的对象列表 (分页查询）
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Query``1(System.Collections.Generic.IList{System.String})">
            <summary>
            根据 id 批量查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.Execute(System.String,System.Object)">
            <summary>
            执行Sql
            </summary>
            <param name="manager"></param>
            <param name="sql"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.ExecuteScalar(System.String,System.Object)">
            <summary>
            执行Sql返回第一行第一列记录
            </summary>
            <param name="manager"></param>
            <param name="sql"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.ExecuteSqlScript(System.String)">
            <summary>
            执行SQL文件
            </summary>
            <param name="manager"></param>
            <param name="sqlFile"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkCreate``1(System.Collections.Generic.List{``0})">
            <summary>
            批量创建
            </summary>
            <param name="dataList"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkCreate(System.String,System.String,System.Data.DataTable)">
            <summary>
            批量创建
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkUpdate``1(System.Collections.Generic.List{``0})">
            <summary>
            批量更新
            </summary>
            <param name="dataList"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkUpdate(System.String,System.String,System.Data.DataTable)">
            <summary>
            批量更新
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkDelete``1(System.Collections.Generic.List{``0})">
            <summary>
            批量删除
            </summary>
            <param name="dataList"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkCreateOrUpdate``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
            <summary>
            批量创建或更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dataList"></param>
        </member>
        <member name="M:Blog.Service.New.Core.EFCore.IEntityManager.BulkCreateOrUpdate(System.String,System.String,System.Data.DataTable,System.Collections.Generic.List{System.String})">
            <summary>
            批量创建或更新
            </summary>
            <param name="tableName"></param>
            <param name="dt"></param>
            <param name=""></param>
            <param name="updateFieldList"></param>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.created_by">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.created_by_name">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.created_at">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.updated_by">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.updated_by_name">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.Base.BaseEntity.updated_at">
            <summary>
            修改日期
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.id">
            <summary>
            实体id
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.is_basic">
            <summary>
            是否基础角色
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.is_basic_name">
            <summary>
            是否基础角色
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.parent_roleid">
            <summary>
            继承角色
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.SysRole.parent_roleid_name">
            <summary>
            继承角色
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.id">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.gender_name">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.realname">
            <summary>
            真实姓名
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.mailbox">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.introduction">
            <summary>
            个人介绍
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.cellphone">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.avatar">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.life_photo">
            <summary>
            生活照
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.roleid">
            <summary>
            角色权限id
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.github_id">
            <summary>
            Github ID
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.gitee_id">
            <summary>
            Gitee ID
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.roleid_name">
            <summary>
            角色权限名
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.statecode">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:Blog.Service.New.Core.Entities.UserInfo.statecode_name">
            <summary>
            启用
            </summary>
        </member>
        <member name="T:Blog.Service.New.Core.Jwt.RSAUtil">
            <summary>
            RSA帮助类（非对称加密）
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.Jwt.RSAUtil.GetKey">
            <summary>
            获取加密所使用的key，RSA算法是一种非对称密码算法，所谓非对称，就是指该算法需要一对密钥，使用其中一个加密，则需要用另一个才能解密。
            </summary>
        </member>
        <member name="M:Blog.Service.New.Core.Jwt.RSAUtil.Encryption(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="str">需要加密的明文</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.Jwt.RSAUtil.Encryption2(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="str">需要加密的明文</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.Jwt.RSAUtil.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="content">加密后内容</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.Jwt.RSAUtil.ExportPublicKeyToPEMFormat(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            导出公钥PEM格式
            </summary>
            <param name="csp"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.Redis.RedisHelper.GetConnect">
            <summary>
            获取ConnectionMultiplexer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.New.Core.Redis.RedisHelper.GetDatabase">
            <summary>
            获取数据库
            </summary>
            <param name="configName"></param>
            <param name="db">默认为0：优先代码的db配置，其次config中的配置</param>
            <returns></returns>
        </member>
    </members>
</doc>
